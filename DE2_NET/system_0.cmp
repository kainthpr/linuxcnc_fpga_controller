	component system_0 is
		port (
			clk_50                               : in    std_logic                     := 'X';             -- clk
			bidir_port_to_and_from_the_SD_DAT    : inout std_logic                     := 'X';             -- export
			out_port_from_the_led_red            : out   std_logic_vector(17 downto 0);                    -- export
			zs_addr_from_the_sdram_0             : out   std_logic_vector(11 downto 0);                    -- addr
			zs_ba_from_the_sdram_0               : out   std_logic_vector(1 downto 0);                     -- ba
			zs_cas_n_from_the_sdram_0            : out   std_logic;                                        -- cas_n
			zs_cke_from_the_sdram_0              : out   std_logic;                                        -- cke
			zs_cs_n_from_the_sdram_0             : out   std_logic;                                        -- cs_n
			zs_dq_to_and_from_the_sdram_0        : inout std_logic_vector(15 downto 0) := (others => 'X'); -- dq
			zs_dqm_from_the_sdram_0              : out   std_logic_vector(1 downto 0);                     -- dqm
			zs_ras_n_from_the_sdram_0            : out   std_logic;                                        -- ras_n
			zs_we_n_from_the_sdram_0             : out   std_logic;                                        -- we_n
			tri_state_bridge_0_data              : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- tri_state_bridge_0_data
			tri_state_bridge_0_readn             : out   std_logic_vector(0 downto 0);                     -- tri_state_bridge_0_readn
			write_n_to_the_cfi_flash_0           : out   std_logic_vector(0 downto 0);                     -- write_n_to_the_cfi_flash_0
			tri_state_bridge_0_address           : out   std_logic_vector(21 downto 0);                    -- tri_state_bridge_0_address
			select_n_to_the_cfi_flash_0          : out   std_logic_vector(0 downto 0);                     -- select_n_to_the_cfi_flash_0
			reset_n                              : in    std_logic                     := 'X';             -- reset_n
			bidir_port_to_and_from_the_SD_CMD    : inout std_logic                     := 'X';             -- export
			in_port_to_the_button_pio            : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- export
			USB_DATA_to_and_from_the_ISP1362     : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DATA
			USB_ADDR_from_the_ISP1362            : out   std_logic_vector(1 downto 0);                     -- ADDR
			USB_RD_N_from_the_ISP1362            : out   std_logic;                                        -- RD_N
			USB_WR_N_from_the_ISP1362            : out   std_logic;                                        -- WR_N
			USB_CS_N_from_the_ISP1362            : out   std_logic;                                        -- CS_N
			USB_RST_N_from_the_ISP1362           : out   std_logic;                                        -- RST_N
			USB_INT0_to_the_ISP1362              : in    std_logic                     := 'X';             -- INT0
			USB_INT1_to_the_ISP1362              : in    std_logic                     := 'X';             -- INT1
			out_port_from_the_SD_CLK             : out   std_logic;                                        -- export
			out_port_from_the_led_green          : out   std_logic_vector(8 downto 0);                     -- export
			in_port_to_the_switch_pio            : in    std_logic_vector(17 downto 0) := (others => 'X'); -- export
			LCD_RS_from_the_lcd_16207_0          : out   std_logic;                                        -- RS
			LCD_RW_from_the_lcd_16207_0          : out   std_logic;                                        -- RW
			LCD_data_to_and_from_the_lcd_16207_0 : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			LCD_E_from_the_lcd_16207_0           : out   std_logic;                                        -- E
			rxd_to_the_uart_0                    : in    std_logic                     := 'X';             -- rxd
			txd_from_the_uart_0                  : out   std_logic;                                        -- txd
			audio_0_oAUD_DATA                    : out   std_logic;                                        -- oAUD_DATA
			audio_0_oAUD_LRCK                    : out   std_logic;                                        -- oAUD_LRCK
			audio_0_oAUD_BCK                     : out   std_logic;                                        -- oAUD_BCK
			audio_0_oAUD_XCK                     : out   std_logic;                                        -- oAUD_XCK
			audio_0_iCLK_18_4                    : in    std_logic                     := 'X';             -- iCLK_18_4
			vga_0_VGA_R                          : out   std_logic_vector(9 downto 0);                     -- VGA_R
			vga_0_VGA_G                          : out   std_logic_vector(9 downto 0);                     -- VGA_G
			vga_0_VGA_B                          : out   std_logic_vector(9 downto 0);                     -- VGA_B
			vga_0_VGA_HS                         : out   std_logic;                                        -- VGA_HS
			vga_0_VGA_VS                         : out   std_logic;                                        -- VGA_VS
			vga_0_VGA_SYNC                       : out   std_logic;                                        -- VGA_SYNC
			vga_0_VGA_BLANK                      : out   std_logic;                                        -- VGA_BLANK
			vga_0_VGA_CLK                        : out   std_logic;                                        -- VGA_CLK
			vga_0_iCLK_25                        : in    std_logic                     := 'X';             -- iCLK_25
			dm9000a_iOSC_50                      : in    std_logic                     := 'X';             -- iOSC_50
			dm9000a_ENET_DATA                    : inout std_logic_vector(15 downto 0) := (others => 'X'); -- ENET_DATA
			dm9000a_ENET_CMD                     : out   std_logic;                                        -- ENET_CMD
			dm9000a_ENET_RD_N                    : out   std_logic;                                        -- ENET_RD_N
			dm9000a_ENET_WR_N                    : out   std_logic;                                        -- ENET_WR_N
			dm9000a_ENET_CS_N                    : out   std_logic;                                        -- ENET_CS_N
			dm9000a_ENET_RST_N                   : out   std_logic;                                        -- ENET_RST_N
			dm9000a_ENET_CLK                     : out   std_logic;                                        -- ENET_CLK
			dm9000a_ENET_INT                     : in    std_logic                     := 'X';             -- ENET_INT
			seg7_display_oSEG0                   : out   std_logic_vector(6 downto 0);                     -- oSEG0
			seg7_display_oSEG1                   : out   std_logic_vector(6 downto 0);                     -- oSEG1
			seg7_display_oSEG2                   : out   std_logic_vector(6 downto 0);                     -- oSEG2
			seg7_display_oSEG3                   : out   std_logic_vector(6 downto 0);                     -- oSEG3
			seg7_display_oSEG4                   : out   std_logic_vector(6 downto 0);                     -- oSEG4
			seg7_display_oSEG5                   : out   std_logic_vector(6 downto 0);                     -- oSEG5
			seg7_display_oSEG6                   : out   std_logic_vector(6 downto 0);                     -- oSEG6
			seg7_display_oSEG7                   : out   std_logic_vector(6 downto 0);                     -- oSEG7
			sram_0_avalon_slave_0_export_DQ      : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DQ
			sram_0_avalon_slave_0_export_ADDR    : out   std_logic_vector(17 downto 0);                    -- ADDR
			sram_0_avalon_slave_0_export_UB_N    : out   std_logic;                                        -- UB_N
			sram_0_avalon_slave_0_export_LB_N    : out   std_logic;                                        -- LB_N
			sram_0_avalon_slave_0_export_WE_N    : out   std_logic;                                        -- WE_N
			sram_0_avalon_slave_0_export_CE_N    : out   std_logic;                                        -- CE_N
			sram_0_avalon_slave_0_export_OE_N    : out   std_logic;                                        -- OE_N
			cnc_module_ospindle_pwm              : out   std_logic;                                        -- ospindle_pwm
			cnc_module_odirs                     : out   std_logic_vector(4 downto 0);                     -- odirs
			cnc_module_ogpio                     : out   std_logic_vector(31 downto 0);                    -- ogpio
			cnc_module_igpio                     : in    std_logic_vector(31 downto 0) := (others => 'X'); -- igpio
			cnc_module_cp                        : out   std_logic;                                        -- cp
			cnc_module_osteps                    : out   std_logic_vector(4 downto 0)                      -- osteps
		);
	end component system_0;

